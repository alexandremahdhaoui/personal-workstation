pacman:
  - nerd-fonts
  - flatpak
  - tmux
  - starship
  - kubectl
  - rust
  - cargo
  - helm
  - jq
  - go-yq
  - bind
  - net-tools
  - inetutils
  - go
  - go-tools
  - delve
  - fuse3
  - ripgrep
  - neovim
  - shellcheck
  - skopeo
  - umoci
  - fuse-overlayfs
  - ltrace
  - wl-clipboard

flatpak:
  remote:
    flathub: https://dl.flathub.org/repo/flathub.flatpakrepo
  flathub:
    - com.google.Chrome
  ref:
    - https://downloads.1password.com/linux/flatpak/1Password.flatpakref

gsettings:
  - set org.gnome.desktop.input-sources xkb-options "['caps:escape,ctrl:swap_lalt_lctl']"
  - set org.gnome.desktop.interface           font-name 'Source Code Pro 11'
  - set org.gnome.desktop.interface monospace-font-name 'Source Code Pro'
  - set org.gnome.desktop.interface  document-font-name 'Source Code Pro'
  - set default-web-browser com.google.Chrome.desktop

files:
  home:
    .config/vib/vib.alexandre.mahdhaoui.com_v1alpha1.config.config.yaml: |
      apiVersion: vib.alexandre.mahdhaoui.com/v1alpha1
      kind: Config
      metadata:
        name: config
      spec:
        operatorstrategy: filesystem
        resourcedir: /home/alexandremahdhaoui/go/src/github.com/alexandremahdhaoui/data/vib

    .config/.tmux.conf: |
      set-option -g default-shell /usr/bin/bash
      set -sg escape-time 10

      # --- vi mode
      set-window-option -g mode-keys vi
      bind-key -T copy-mode-vi v send -X begin-selection
      bind-key -T copy-mode-vi V send -X select-line
      bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'wl-copy'

      # --- Smart pane switching with awareness of Vim splits.
      # See: https://github.com/christoomey/vim-tmux-navigator
      is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
          | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
      bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
      bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
      bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
      bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
      tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
      if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
          "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
      if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
          "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

      # --- tmux vim bindings
      bind h select-pane -L
      bind j select-pane -D
      bind k select-pane -U
      bind l select-pane -R
      bind \\ select-pane -l

      # --- tmux plugins
      set -g @plugin 'tmux-plugins/tpm'
      set -g @plugin 'tmux-plugins/tmux-sensible'
      set -g @plugin 'tmux-plugins/tmux-resurrect'
      set -g @plugin 'tmux-plugins/tmux-continuum'
      set -g @continuum-restore 'on'

      # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
      run '~/.tmux/plugins/tpm/tpm'

    .bashrc: |
      if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
        exec tmux
      fi
      export EDITOR=vi
      export GOPATH="${HOME}/go"
      export GOBIN="${GOPATH}/bin"
      export PATH="${PATH}:${GOBIN}:${HOME}/.local/bin"
      . <(vib render profile linux)

    .gitconfig: |
      [user]
        email = alexandre.mahdhaoui@gmail.com
        name = Alexandre Mahdhaoui
      [core]
        excludesfile = /home/alexandremahdhaoui/.gitignore
      [init]
        defaultBranch = main
      [url "git@github.com:alexandremahdhaoui"]
        insteadOf = https://github.com/alexandremahdhaoui

    .gitignore: |
      .idea
      nohup.out

    .config/lvim/config.lua: |
      vim.opt.shiftwidth=2
      vim.opt.tabstop=2
      vim.opt.expandtab = true
      vim.opt.showcmd = true
      vim.opt.showmode = true
      vim.opt.hlsearch = true
      vim.opt.showmatch = true
      vim.opt.mouse = ""

      ------------------------
      -- Treesitter
      ------------------------
      lvim.builtin.treesitter.ensure_installed = {
        "go",
        "gomod",
      }

      ------------------------
      -- Plugins
      ------------------------
      lvim.plugins = {
        "olexsmir/gopher.nvim",
        "leoluz/nvim-dap-go",
        {
          "christoomey/vim-tmux-navigator",
          cmd = {
            "TmuxNavigateLeft",
            "TmuxNavigateDown",
            "TmuxNavigateUp",
            "TmuxNavigateRight",
            "TmuxNavigatePrevious",
          },
          keys = {
            { "<c-h>", "<cmd><C-U>TmuxNavigateLeft<cr>" },
            { "<c-j>", "<cmd><C-U>TmuxNavigateDown<cr>" },
            { "<c-k>", "<cmd><C-U>TmuxNavigateUp<cr>" },
            { "<c-l>", "<cmd><C-U>TmuxNavigateRight<cr>" },
            { "<c-\\>", "<cmd><C-U>TmuxNavigatePrevious<cr>" },
          },
        }
      }

      ------------------------
      -- Formatting
      ------------------------
      local formatters = require "lvim.lsp.null-ls.formatters"
      formatters.setup {
        { command = "goimports_reviser", filetypes = { "go" } },
        { command = "gofumpt", filetypes = { "go" } },
        { command = "golines", filetypes = { "go" } },
      }

      local linters = require("lvim.lsp.null-ls.linters")
      linters.setup {
        {
          command = "shellcheck",
          args = { "--severity", "warning"},
          filetypes = { "sh" }
        }
      }

      lvim.format_on_save = {
        enabled = true,
        pattern = { "*.go" },
      }

      ------------------------
      -- Dap
      ------------------------
      local dap_ok, dapgo = pcall(require, "dap-go")
      if not dap_ok then
        return
      end

      dapgo.setup()

      ------------------------
      -- LSP
      ------------------------
      vim.list_extend(lvim.lsp.automatic_configuration.skipped_servers, { "gopls" })

      local lsp_manager = require "lvim.lsp.manager"
      lsp_manager.setup("golangci_lint_ls", {
        on_init = require("lvim.lsp").common_on_init,
        capabilities = require("lvim.lsp").common_capabilities(),
      })

      lsp_manager.setup("gopls", {
        on_attach = function(client, bufnr)
          require("lvim.lsp").common_on_attach(client, bufnr)
          local _, _ = pcall(vim.lsp.codelens.refresh)
          local map = function(mode, lhs, rhs, desc)
            if desc then
              desc = desc
            end
            vim.keymap.set(mode, lhs, rhs, { silent = true, desc = desc, buffer = bufnr, noremap = true })
          end

          map("n", "<leader>Ci", "<cmd>GoInstallDeps<Cr>", "Install Go Dependencies")
          map("n", "<leader>Ct", "<cmd>GoMod tidy<cr>", "Tidy")
          map("n", "<leader>Ca", "<cmd>GoTestAdd<Cr>", "Add Test")
          map("n", "<leader>CA", "<cmd>GoTestsAll<Cr>", "Add All Tests")
          map("n", "<leader>Ce", "<cmd>GoTestsExp<Cr>", "Add Exported Tests")
          map("n", "<leader>Cg", "<cmd>GoGenerate<Cr>", "Go Generate")
          map("n", "<leader>Cf", "<cmd>GoGenerate %<Cr>", "Go Generate File")
          map("n", "<leader>Cc", "<cmd>GoCmt<Cr>", "Generate Comment")
          map("n", "<leader>DT", "<cmd>lua require('dap-go').debug_test()<cr>", "Debug Test")
        end,
        on_init = require("lvim.lsp").common_on_init,
        capabilities = require("lvim.lsp").common_capabilities(),
        settings = {
          gopls = {
            completeUnimported = true,
            usePlaceholders = true,
            gofumpt = true,
            analyses = {
              unusedparams = true,
            },
            codelenses = {
              generate = false,
              gc_details = true,
              test = true,
              tidy = true,
            },
          },
        },
      })

      local status_ok, gopher = pcall(require, "gopher")
      if not status_ok then
        return
      end

      gopher.setup {
        commands = {
          go = "go",
          gomodifytags = "gomodifytags",
          gotests = "gotests",
          impl = "impl",
          iferr = "iferr",
        },
      }

